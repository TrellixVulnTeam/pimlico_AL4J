#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export PYTHONPATH=$PYTHONPATH:$DIR/../src/python:$DIR/../lib/python

if [ -n "$VIRTUALENV" ]; then
    echo "Using virtualenv dir $VIRTUALENV"
    virtualenv_dir=$VIRTUALENV
else
    virtualenv_dir=$DIR/../lib/python_env
fi
python=$virtualenv_dir/bin/python

# Check the virtualenv environment is set up
if [ ! -f "$python" ]; then
    echo "Virtualenv for installing local Python software is not yet setup: running setup now"
    python $DIR/../lib/libutils/create_virtualenv.py $virtualenv_dir
    if [ "$?" != "0" ]; then
        # Failed to set up virtualenv: don't carry on running
        exit 1
    fi
    if [ ! -f "$python" ]; then
        echo "Virtualenv setup seemed to work, but Python interpreter $python is still not available"
        exit 1
    fi
    echo "Successfully set up virtualenv for running Pimlico"
fi

if [ -n "$GPU" ]; then
    export THEANO_FLAGS='device=gpu,floatX=float32'
fi

if [ -n "$PROFILE" ]; then
    # Run the profiler instead of ordinary python
    # Allows you to profile any script by just putting:
    #  PROFILE=1
    # in front of the command
    profile_out=$(readlink -m $DIR/../log/profile)
    echo "Profiling, output to $profile_out" >&2
    if [ "$1" == "-m" ]; then
        shift
        # Try to convert to filename
        script_name="$DIR/../src/python/${1//.//}.py"
        # Replace arg 1
        set -- $script_name "${@:2}"
    fi
    $python $PYARGS -m cProfile -o $profile_out "$@"
elif [ -n "$MEMPROFILE" ]; then
    # Similar, does memory profiling
    echo "Memory profiling"
    $python -m memory_profiler "$@"
elif [ -n "$GDB" ]; then
    echo "Running Python from gdb"
    gdb -ex r --args $python "$@"
else
    # Run python using virtualenv python interpreter
    $python "$@"
fi
