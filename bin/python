#!/bin/bash
# Wrapper around the python executable of the current Pimlico environment's virtualenv
# First, checks that the virtualenv is set up and installs it if not
# Then calls python, passing through any cmdline args
#
# Several environment variables allow you easy access to some special runtime behaviours:
#
# GPU=1
#   Pass in Theano flags to enable GPU execution
# GPU=gpuX
#   Tell Theano to use the Xth GPU
# PROFILE=1
#   Run the Python script within the cProfile Python profiler
# MEMPROFILE=1
#   In a similar fashion, run memory profiling using the standard memory_profiler module
# GDB=1
#   Run the script within the GDB debugger, useful for debugging things like segfaults. GDB needs to be installed
#

# Get the directory containing this script, following any symlinks
# Usual Bash solutions don't work across Max and Linux, so this Perl alternative is better
THIS=$(perl -MCwd -le 'print Cwd::abs_path(shift)' "${BASH_SOURCE[0]}")
DIR=$(dirname $THIS)

# Add Pimlico-specific Python library locations
export PYTHONPATH=$PYTHONPATH:$DIR/../src/python:$DIR/../lib/python

if [ -n "$PIMENV" ]; then
    # This is the new, less verbose way of specifying which virtualenv to use: just the virtualenv name, not path
    echo "Using Pimlico virtualenv $PIMENV"
    virtualenv_dir=$DIR/../lib/virtualenv/$PIMENV
elif [ -n "$VIRTUALENV" ]; then
    # This was the old way of specifying virtualenvs, which was more laborious
    echo "Using virtualenv dir $VIRTUALENV"
    virtualenv_dir=$VIRTUALENV
else
    virtualenv_dir=$DIR/../lib/virtualenv/default
fi
python=$virtualenv_dir/bin/python

# Check the virtualenv environment is set up
if [ ! -f "$python" ]; then
    echo "Virtualenv for installing local Python software is not yet setup: running setup now"

    # The first time Pimlico is run, we set up a virtualenv
    # Allow the user to specify a different python interpreter for doing this
    if [ -z "$PYTHON_CMD" ]; then
        PYTHON_CMD="python"
    fi

    $PYTHON_CMD $DIR/../lib/libutils/create_virtualenv.py $virtualenv_dir

    if [ "$?" != "0" ]; then
        # Failed to set up virtualenv: don't carry on running
        exit 1
    fi
    if [ ! -f "$python" ]; then
        echo "Virtualenv setup seemed to work, but Python interpreter $python is still not available"
        exit 1
    fi
    echo "Successfully set up virtualenv for running Pimlico. Running basic Pimlico setup"

    # If we've just installed the virtualenv then there'll be basic setup to be done
    # Run Pimlico in its special first-run setup mode that doesn't require loading a pipeline
    $python -m pimlico.cli.main setup

    # If the command-line args only requested this setup command anyway, it will get run again below,
    #  but that isn't a problem, as (if all has succeeded) it will just exit quietly
fi

if [ -n "$GPU" ]; then
    if [ "$GPU" == "1" ]; then
        # Tell Theano we're using the GPU and let it choose which
        export THEANO_FLAGS='device=gpu,floatX=float32,'$THEANO_FLAGS
    else
        # Specify a particular GPU for Theano
        export THEANO_FLAGS='device='$GPU',floatX=float32,'$THEANO_FLAGS
    fi
fi

if [ -n "$PROFILE" ]; then
    # Run the profiler instead of ordinary python
    # Allows you to profile any script by just putting:
    #  PROFILE=1
    # in front of the command
    profile_out=$(readlink -m $DIR/../log/profile)
    echo "Profiling, output to $profile_out" >&2
    if [ "$1" == "-m" ]; then
        shift
        # Try to convert to filename
        script_name="$DIR/../src/python/${1//.//}.py"
        # Replace arg 1
        set -- $script_name "${@:2}"
    fi
    $python $PYARGS -m cProfile -o $profile_out "$@"
elif [ -n "$MEMPROFILE" ]; then
    # Similar, does memory profiling
    echo "Memory profiling"
    $python -m memory_profiler "$@"
elif [ -n "$GDB" ]; then
    echo "Running Python from gdb"
    gdb -ex r --args $python "$@"
else
    # Run python using virtualenv python interpreter
    $python "$@"
fi
